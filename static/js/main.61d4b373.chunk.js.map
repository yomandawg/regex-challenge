{"version":3,"sources":["components/Challenge.js","App.js","index.js"],"names":["charSet","Challenge","useState","level","setLevel","score","setScore","value","setValue","question","setQuestion","start","setStart","ref","useRef","useEffect","current","focus","regex","text","RegExp","exec","e","testRegex","generateRandomText","chars","slice","join","i","Math","floor","random","length","disabled","onClick","type","onChange","event","target","App","ReactDOM","render","document","getElementById"],"mappings":"4MAeA,IAAMA,EAAU,CACd,aACA,6BACA,6BACA,mBACA,sBA2FaC,MAxFf,WAAsB,IAAD,EACOC,mBAAS,GADhB,mBACZC,EADY,KACLC,EADK,OAEOF,mBAAS,GAFhB,mBAEZG,EAFY,KAELC,EAFK,OAGOJ,mBAAS,IAHhB,mBAGZK,EAHY,KAGLC,EAHK,OAIaN,mBAAS,wBAJtB,mBAIZO,EAJY,KAIFC,EAJE,OAKOR,oBAAS,GALhB,mBAKZS,EALY,KAKLC,EALK,KAMbC,EAAMC,mBAEZC,qBAAU,WACRF,EAAIG,QAAQC,WAGdF,qBAAU,WACJJ,EAlCR,SAAmBO,EAAOC,GACxB,GAAID,IAAUC,GAAkB,OAAVD,EACpB,OAAO,EAET,IAEE,GADcE,OAAOF,GACTG,KAAKF,GAAM,KAAOA,EAC5B,OAAO,EAET,MAAOG,IACT,OAAO,EAyBQC,CAAUhB,EAAOE,KAG1BH,EAASD,EAAQ,GACjBmB,KAGY,UAAVjB,IACFK,GAAS,GACTY,OAGH,CAACjB,IAEJQ,qBAAU,WACRH,GAAS,GACTJ,EAAS,IACTF,EAAS,KACR,CAACH,IAEJ,IAIMqB,EAAqB,WAKzB,IAJA,IAAIC,EAAQzB,EAAQ0B,MAAM,EAAG,EAAIvB,GAAOwB,KAAK,IAEzCR,EAAO,GAEFS,EAAI,EAAGA,EAAI,GAAIA,IACtBT,GAAQM,EAAMI,KAAKC,MAAMD,KAAKE,SAAWN,EAAMO,SAGjDxB,EAAS,IACTE,EAAYS,IAGd,OACE,oCACE,6BAAMR,EAAQF,EAAW,wBACzB,wCAAcJ,GACd,sCAEE,4BACE4B,WAAoB,IAAV9B,IAAeQ,GACzBuB,QAAS,kBAAM9B,EAASD,EAAQ,KAFlC,KAMCA,EACD,4BACE8B,WAAoB,IAAV9B,IAAeQ,GACzBuB,QAAS,kBAAM9B,EAASD,EAAQ,KAFlC,MAOF,2BAAOgC,KAAK,OAAOtB,IAAKA,EAAKuB,SArCP,SAACC,GACzB7B,EAAS6B,EAAMC,OAAO/B,QAoCsCA,MAAOA,IACjE,4BAAQ0B,UAAUtB,EAAsBuB,QAASV,GAAjD,YAGA,4BACES,UAAUtB,EACVuB,QAAS,WACPtB,GAAS,GACTJ,EAAS,MAJb,UCvFS+B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.61d4b373.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nfunction testRegex(regex, text) {\r\n  if (regex === text || regex === '.*') {\r\n    return false;\r\n  }\r\n  try {\r\n    let pattern = RegExp(regex);\r\n    if (pattern.exec(text)[0] === text) {\r\n      return true;\r\n    }\r\n  } catch (e) {}\r\n  return false;\r\n}\r\n\r\nconst charSet = [\r\n  '0123456789',\r\n  'abcdefghijklmnopqrstuvwxyz',\r\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n  '!\"#$%&\\'()*+,-./',\r\n  ':;<=>?@[\\\\]^_`{|}~',\r\n];\r\n\r\nfunction Challenge() {\r\n  const [level, setLevel] = useState(1);\r\n  const [score, setScore] = useState(0);\r\n  const [value, setValue] = useState('');\r\n  const [question, setQuestion] = useState(\"type 'start' to play\");\r\n  const [start, setStart] = useState(false);\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    ref.current.focus();\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (start) {\r\n      let pass = testRegex(value, question);\r\n\r\n      if (pass) {\r\n        setScore(score + 1);\r\n        generateRandomText();\r\n      }\r\n    } else {\r\n      if (value === 'start') {\r\n        setStart(true);\r\n        generateRandomText();\r\n      }\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    setStart(false);\r\n    setValue('');\r\n    setScore(0);\r\n  }, [level]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const generateRandomText = () => {\r\n    let chars = charSet.slice(0, 2 + level).join('');\r\n\r\n    let text = '';\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      text += chars[Math.floor(Math.random() * chars.length)];\r\n    }\r\n\r\n    setValue('');\r\n    setQuestion(text);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>{start ? question : \"type 'start' to play\"}</div>\r\n      <div>score : {score}</div>\r\n      <div>\r\n        level:\r\n        <button\r\n          disabled={level === 1 || start ? true : false}\r\n          onClick={() => setLevel(level - 1)}\r\n        >\r\n          -\r\n        </button>\r\n        {level}\r\n        <button\r\n          disabled={level === 3 || start ? true : false}\r\n          onClick={() => setLevel(level + 1)}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n      <input type=\"text\" ref={ref} onChange={handleInputChange} value={value} />\r\n      <button disabled={start ? false : true} onClick={generateRandomText}>\r\n        Generate\r\n      </button>\r\n      <button\r\n        disabled={start ? false : true}\r\n        onClick={() => {\r\n          setStart(false);\r\n          setValue('');\r\n        }}\r\n      >\r\n        Stop\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Challenge;\r\n","import React from 'react';\r\nimport Challenge from './components/Challenge';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Challenge />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}